pynamics_to_control

>>> import numpy as np
>>> import control as ct
>>> from pynamics.models.state_space_models import LinearModel
>>> from pynamics.models.model_conversion import pynamics_to_control
>>>
>>> A = np.array([[0, 0, -1], [1, 0, -3], [0, 1, -3]]);
>>> B = np.array([1, -5, 1]).reshape(-1, 1);
>>> C = np.array([0, 0, 1]);
>>> D = np.array([0]);
>>> py_model = LinearModel(np.zeros((3, 1)), np.zeros((1, 1)), A, B, C, D);
>>>
>>> ct_model = pynamics_to_control(py_model);
>>> isinstance(ct_model, ct.statesp.StateSpace)
True
>>>
>>> ct_model.A
array([[ 0.,  0., -1.],
       [ 1.,  0., -3.],
       [ 0.,  1., -3.]])
>>>
>>> ct_model.B
array([[ 1.],
       [-5.],
       [ 1.]])
>>>
>>> ct_model.C
array([[0., 0., 1.]])
>>>
>>> ct_model.D
array([[0.]])

control_to_pynamics

>>> import numpy as np
>>> import control as ct
>>> import pynamics as pyn
>>> from pynamics.models.model_conversion import control_to_pynamics
>>>
>>> A = np.array([[0, 0, -1], [1, 0, -3], [0, 1, -3]]);
>>> B = np.array([1, -5, 1]).reshape(-1, 1);
>>> C = np.array([0, 0, 1]);
>>> D = np.array([0]);
>>> ct_model = ct.ss(A, B, C, D);
>>>
>>> py_model = control_to_pynamics(ct_model, initial_state=np.zeros((3, 1)), initial_control=np.zeros((1, 1)));
>>> isinstance(py_model, pyn.models.state_space_models.LinearModel)
True
>>>
>>> py_model.A
array([[ 0.,  0., -1.],
       [ 1.,  0., -3.],
       [ 0.,  1., -3.]])
>>>
>>> py_model.B
array([[ 1.],
       [-5.],
       [ 1.]])
>>>
>>> py_model.C
array([[0., 0., 1.]])
>>>
>>> py_model.D
array([[0.]])

Linear model -> get state

>>> import numpy as np
>>> from pynamics.models.state_space_models import LinearModel
>>>
>>> A = np.array([[0, 0, -1], [1, 0, -3], [0, 1, -3]]);
>>> B = np.array([1, -5, 1]).reshape(-1, 1);
>>> C = np.array([0, 0, 1]);
>>> D = np.array([0]);
>>> model = LinearModel(np.zeros((3, 1)), np.zeros((1, 1)), A, B, C, D);
>>>
>>> model.get_state() 
array([[0.],
       [0.],
       [0.]])

Linear model -> get output

>>> import numpy as np
>>> from pynamics.models.state_space_models import LinearModel
>>>
>>> A = np.array([[0, 0, -1], [1, 0, -3], [0, 1, -3]]);
>>> B = np.array([1, -5, 1]).reshape(-1, 1);
>>> C = np.array([0, 0, 1]);
>>> D = np.array([0]);
>>> model = LinearModel(np.ones((3, 1)), np.zeros((1, 1)), A, B, C, D);
>>>
>>> model.get_output()
array([[1.]])

Linear model -> get input

>>> import numpy as np
>>> from pynamics.models.state_space_models import LinearModel
>>>
>>> A = np.array([[0, 0, -1], [1, 0, -3], [0, 1, -3]]);
>>> B = np.array([1, -5, 1]).reshape(-1, 1);
>>> C = np.array([0, 0, 1]);
>>> D = np.array([0]);
>>> model = LinearModel(np.zeros((3, 1)), np.ones((1, 1)), A, B, C, D);
>>>
>>> model.get_input()
array([[1.]])

Linear model -> set input

>>> import numpy as np
>>> from pynamics.models.state_space_models import LinearModel
>>>
>>> A = np.array([[0, 0, -1], [1, 0, -3], [0, 1, -3]]);
>>> B = np.array([1, -5, 1]).reshape(-1, 1);
>>> C = np.array([0, 0, 1]);
>>> D = np.array([0]);
>>> model = LinearModel(np.zeros((3, 1)), np.ones((1, 1)), A, B, C, D);
>>>
>>> model.get_input()
array([[1.]])
>>>
>>> model.set_input(np.array([[5.0]]));
>>> model.get_input()
array([[5.]])

For single-input systems, floats and integers also constitute valid inputs:

>>> model.set_input(2.5);
>>> model.get_input()
array([[2.5]])

Linear model -> update state

>>> import numpy as np
>>> from pynamics.models.state_space_models import LinearModel
>>>
>>> A = np.array([[0, 0, -1], [1, 0, -3], [0, 1, -3]]);
>>> B = np.array([1, -5, 1]).reshape(-1, 1);
>>> C = np.array([0, 0, 1]);
>>> D = np.array([0]);
>>> model = LinearModel(np.zeros((3, 1)), np.zeros((1, 1)), A, B, C, D);
>>> 
>>> model.get_state()
array([[0.],
       [0.],
       [0.]])
>>>
>>> model.update_state(np.ones((3, 1)));
>>> model.get_state()
array([[1.],
       [1.],
       [1.]])

Linear model -> eval

>>> import numpy as np
>>> from pynamics.models.state_space_models import LinearModel
>>>
>>> A = np.array([[0, 0, -1], [1, 0, -3], [0, 1, -3]]);
>>> B = np.array([1, -5, 1]).reshape(-1, 1);
>>> C = np.array([0, 0, 1]);
>>> D = np.array([0]);
>>> model = LinearModel(np.ones((3, 1)), np.zeros((1, 1)), A, B, C, D);
>>>
>>> model.eval(0.0, x=model.get_state())
array([[-1.],
       [-2.],
       [-2.]])

Nonlinear model -> get state

>>> import numpy as np
>>> from pynamics.models.state_space_models import NonlinearModel
>>>
>>> # Define the state function.
>>> def state_function(state: np.ndarray, control: np.ndarray, time: float):
...
...    state_derivative_1 = state[0] + 2 * np.cos(state[1]);
...    state_derivative_2 = state[1] + control[0];
...    state_derivative = np.array([state_derivative_1, state_derivative_2]);
...
...    return state_derivative;   
>>>
>>> # Define the output function.
>>> def output_function(state: np.ndarray):
...
...    output = np.array([state[0]**state[1]]);
...
...    return output;
>>>
>>> model = NonlinearModel(np.zeros((2, 1)), np.ones((1, 1)), state_function, output_function, input_dim=2, output_dim=1);
>>>
>>> model.get_state()
array([[0.],
       [0.]])

Nonlinear model -> get output

>>> import numpy as np
>>> from pynamics.models.state_space_models import NonlinearModel
>>>
>>> # Define the state function.
>>> def state_function(state: np.ndarray, control: np.ndarray, time: float):
...
...     state_derivative_1 = state[0] + 2 * np.cos(state[1]);
...     state_derivative_2 = state[1] + control[0];
...     state_derivative = np.array([state_derivative_1, state_derivative_2]);
...
...     return state_derivative;   
>>>
>>> # Define the output function.
>>> def output_function(state: np.ndarray):
...
...     output = np.array([state[0]**state[1]]);
...
...     return output;
>>>
>>> model = NonlinearModel(np.ones((2, 1)), np.zeros((1, 1)), state_function, output_function, input_dim=2, output_dim=1);
>>>
>>> model.get_output()
array([[1.]])

Nonlinear model -> get input

>>> import numpy as np
>>> from pynamics.models.state_space_models import NonlinearModel
>>>
>>> # Define the state function.
>>> def state_function(state: np.ndarray, control: np.ndarray, time: float):
...
...     state_derivative_1 = state[0] + 2 * np.cos(state[1]);
...     state_derivative_2 = state[1] + control[0];
...     state_derivative = np.array([state_derivative_1, state_derivative_2]);
...
...     return state_derivative;   
>>>
>>> # Define the output function.
>>> def output_function(state: np.ndarray):
...
...     output = np.array([state[0]**state[1]]);
...
...     return output;
>>>
>>> model = NonlinearModel(np.ones((2, 1)), 2.5 * np.ones((1, 1)), state_function, output_function, input_dim=2, output_dim=1);
>>>
>>> model.get_input()
array([[2.5]])

Nonlinear model -> set input

>>> import numpy as np
>>> from pynamics.models.state_space_models import NonlinearModel
>>>
>>> # Define the state function.
>>> def state_function(state: np.ndarray, control: np.ndarray, time: float):
...
...     state_derivative_1 = state[0] + 2 * np.cos(state[1]);
...     state_derivative_2 = state[1] + control[0];
...     state_derivative = np.array([state_derivative_1, state_derivative_2]);
...
...     return state_derivative;   
>>>
>>> # Define the output function.
>>> def output_function(state: np.ndarray):
...
...     output = np.array([state[0]**state[1]]);
...
...     return output;
>>>
>>> model = NonlinearModel(np.ones((2, 1)), 2.5 * np.ones((1, 1)), state_function, output_function, input_dim=2, output_dim=1);
>>>
>>> model.get_input()
array([[2.5]])
>>>
>>> model.set_input(np.array([[5.0]]));
>>> model.get_input()
array([[5.]])

Nonlinear model -> update state

>>> import numpy as np
>>> from pynamics.models.state_space_models import NonlinearModel
>>>
>>> # Define the state function.
>>> def state_function(state: np.ndarray, control: np.ndarray, time: float):
...
...     state_derivative_1 = state[0] + 2 * np.cos(state[1]);
...     state_derivative_2 = state[1] + control[0];
...     state_derivative = np.array([state_derivative_1, state_derivative_2]);
...
...     return state_derivative;   
>>>
>>> # Define the output function.
>>> def output_function(state: np.ndarray):
...
...     output = np.array([state[0]**state[1]]);
...
...     return output;
>>>
>>> model = NonlinearModel(np.ones((2, 1)), np.ones((1, 1)), state_function, output_function, input_dim=2, output_dim=1);
>>> 
>>> model.get_state()
array([[1.],
       [1.]])
>>>
>>> model.update_state(np.zeros((2, 1)));
>>> model.get_state()
array([[0.],
       [0.]])

Nonlinear model -> eval method

>>> import numpy as np
>>> from pynamics.models.state_space_models import NonlinearModel
>>>
>>> # Define the state function.
>>> def state_function(state: np.ndarray, control: np.ndarray, time: float):
...
...     state_derivative_1 = state[0] + 2 * np.cos(state[1]);
...     state_derivative_2 = state[1] + control[0];
...     state_derivative = np.array([state_derivative_1, state_derivative_2]);
...
...     return state_derivative;   
>>>
>>> # Define the output function.
>>> def output_function(state: np.ndarray):
...
...     output = np.array([state[0]**state[1]]);
...
...     return output;
>>>
>>> model = NonlinearModel(np.ones((2, 1)), np.ones((1, 1)), state_function, output_function, input_dim=2, output_dim=1);
>>> 
>>> model.eval(t=0.0, x=model.get_state())
array([[2.08060461],
       [2.        ]])

Sim summary

>>> import numpy as np
>>> from pynamics.models.state_space_models import LinearModel
>>> from pynamics.simulations import Sim
>>> 
>>> A = np.array([[0, 0, -1], [1, 0, -3], [0, 1, -3]]);
>>> B = np.array([1, -5, 1]).reshape(-1, 1);
>>> C = np.array([0, 0, 1]);
>>> D = np.array([0]);
>>> model = LinearModel(np.zeros((3, 1)), np.zeros((1, 1)), A, B, C, D);
>>>
>>> simulation = Sim(model, input_signal=np.ones(int(10/0.001)+1));
>>> simulation.summary();
Simulation settings
-------------------
Initial time step: 0.0 s
Final time step: 10.0 s
Solver step size: 0.001 s
-------------------
Input signals format: (1, 10001)
Output signals format: (1, 10001)
Control actions format: (1, 10001)
Reference lookahead: 1 time step
-------------------
Simulation mode: open_loop

Simulation run

>>> import numpy as np
>>> from pynamics.models.state_space_models import LinearModel
>>> from pynamics.simulations import Sim
>>> 
>>> A = np.array([[0, 0, -1], [1, 0, -3], [0, 1, -3]]);
>>> B = np.array([1, -5, 1]).reshape(-1, 1);
>>> C = np.array([0, 0, 1]);
>>> D = np.array([0]);
>>> model = LinearModel(np.zeros((3, 1)), np.zeros((1, 1)), A, B, C, D);
>>>
>>> simulation = Sim(model, input_signal=np.ones(int(10/0.001)+1));
>>> res = simulation.run();
>>> res
         Time  Ref_1  u_1       y_1
0       0.000    1.0  0.0  0.000000
1       0.001    1.0  1.0  0.000996
2       0.002    1.0  1.0  0.001984
3       0.003    1.0  1.0  0.002964
4       0.004    1.0  1.0  0.003936
...       ...    ...  ...       ...
9996    9.996    1.0  1.0  0.984014
9997    9.997    1.0  1.0  0.984026
9998    9.998    1.0  1.0  0.984039
9999    9.999    1.0  1.0  0.984052
10000  10.000    1.0  1.0  0.984065
<BLANKLINE>
[10001 rows x 4 columns]

Simulation reset

>>> import numpy as np
>>> from pynamics.models.state_space_models import LinearModel
>>> from pynamics.simulations import Sim
>>> 
>>> A = np.array([[0, 0, -1], [1, 0, -3], [0, 1, -3]]);
>>> B = np.array([1, -5, 1]).reshape(-1, 1);
>>> C = np.array([0, 0, 1]);
>>> D = np.array([0]);
>>> model = LinearModel(np.zeros((3, 1)), np.zeros((1, 1)), A, B, C, D);
>>>
>>> simulation = Sim(model, input_signal=np.ones(int(10/0.001)+1));
>>> res = simulation.run();
>>> simulation.system.x
array([[7.98056883],
       [1.96495125],
       [0.98406462]])
>>>
>>> simulation.reset(np.zeros((3, 1)), np.zeros((1, 1)));
Sim outputs and control actions were reset sucessfully.
>>> simulation.system.x
array([[0.],
       [0.],
       [0.]])

Simulation tracking plot

>>> import numpy as np
>>> from pynamics.models.state_space_models import LinearModel
>>> from pynamics.simulations import Sim
>>> 
>>> A = np.array([[0, 0, -1], [1, 0, -3], [0, 1, -3]]);
>>> B = np.array([1, -5, 1]).reshape(-1, 1);
>>> C = np.array([0, 0, 1]);
>>> D = np.array([0]);
>>> model = LinearModel(np.zeros((3, 1)), np.zeros((1, 1)), A, B, C, D);
>>>
>>> simulation = Sim(model, input_signal=np.ones(int(10/0.001)+1));
>>> res = simulation.run();
>>> _ = Sim.tracking_plot(res, "Time", "Ref_1", "y_1");

Simulation outputs plot

>>> import numpy as np
>>> from pynamics.models.state_space_models import LinearModel
>>> from pynamics.simulations import Sim
>>> 
>>> A = np.array([[0, 0, -1], [1, 0, -3], [0, 1, -3]]);
>>> B = np.array([1, -5, 1]).reshape(-1, 1);
>>> C = np.array([0, 0, 1]);
>>> D = np.array([0]);
>>> model = LinearModel(np.zeros((3, 1)), np.zeros((1, 1)), A, B, C, D);
>>>
>>> simulation = Sim(model, input_signal=np.ones(int(10/0.001)+1));
>>> res = simulation.run();
>>> 
>>> _ = Sim.system_outputs_plot(res, "Time", ["y_1"]);

Simulation step response

>>> import numpy as np
>>> from pynamics.models.state_space_models import LinearModel
>>> from pynamics.simulations import Sim
>>> 
>>> A = np.array([[0, 0, -1], [1, 0, -3], [0, 1, -3]]);
>>> B = np.array([1, -5, 1]).reshape(-1, 1);
>>> C = np.array([0, 0, 1]);
>>> D = np.array([0]);
>>> model = LinearModel(np.zeros((3, 1)), np.zeros((1, 1)), A, B, C, D);
>>>
>>> simulation = Sim.step_response(model, step_magnitude=2);
>>> res = simulation.run();
>>> 
>>> _ = Sim.tracking_plot(res, "Time", "Ref_1", "y_1");

Simulation ramp response

>>> import numpy as np
>>> from pynamics.models.state_space_models import LinearModel
>>> from pynamics.simulations import Sim
>>> 
>>> A = np.array([[0, 0, -1], [1, 0, -3], [0, 1, -3]]);
>>> B = np.array([1, -5, 1]).reshape(-1, 1);
>>> C = np.array([0, 0, 1]);
>>> D = np.array([0]);
>>> model = LinearModel(np.zeros((3, 1)), np.zeros((1, 1)), A, B, C, D);
>>>
>>> simulation = Sim.ramp(model, slope=1);
>>> res = simulation.run();
>>> 
>>> _ = Sim.tracking_plot(res, "Time", "Ref_1", "y_1");